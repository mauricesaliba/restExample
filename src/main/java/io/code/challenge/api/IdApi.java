/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.2).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.code.challenge.api;

import io.code.challenge.model.MobileSubscriberDto;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import javax.validation.Valid;



@Api(value = "{id}")
public interface IdApi {

    @ApiOperation(value = "Delete mobile number", nickname = "deleteMobileNumber", notes = "Delete a mobile number by ID.", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Successful Operation."),
        @ApiResponse(code = 404, message = "Mobile number to delete does not exist."),
        @ApiResponse(code = 500, message = "Server error.") })
    @RequestMapping(value = "/{id}",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteMobileNumber(@ApiParam(value = "Mobile Subscriber ID to delete.",required=true) @PathVariable("id") Long id);


    @ApiOperation(value = "Get a specific mobile number", nickname = "getMobileNumberById", notes = "Get a specific mobile number", response = MobileSubscriberDto.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful Operation.", response = MobileSubscriberDto.class),
        @ApiResponse(code = 404, message = "Not found."),
        @ApiResponse(code = 500, message = "Server error.") })
    @RequestMapping(value = "/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<MobileSubscriberDto> getMobileNumberById(@ApiParam(value = "Mobile Subscriber ID",required=true) @PathVariable("id") Long id);


    @ApiOperation(value = "Update mobile number", nickname = "updateMobileNumber", notes = "Update a mobile number by ID. Only field that can be updated is 'service_type'. Essentially - Change a mobile number from prepaid to postpaid or vice versa.", response = MobileSubscriberDto.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful Operation.", response = MobileSubscriberDto.class),
        @ApiResponse(code = 400, message = "Bad request / failed validation."),
        @ApiResponse(code = 404, message = "Mobile number to update does not exist."),
        @ApiResponse(code = 500, message = "Server error.") })
    @RequestMapping(value = "/{id}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<MobileSubscriberDto> updateMobileNumber(@ApiParam(value = "Mobile Subscriber ID to update.",required=true) @PathVariable("id") Long id,@ApiParam(value = ""  )  @Valid @RequestBody MobileSubscriberDto body);

}
